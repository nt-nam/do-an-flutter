import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'dart:developer' as developer;
import '../../blocs/cart/cart_bloc.dart';
import '../../blocs/cart/cart_event.dart';
import '../../blocs/cart/cart_state.dart';
import '../../blocs/account/account_bloc.dart';
import '../../blocs/account/account_state.dart';
import '../../blocs/account/account_event.dart';
import '../../blocs/user/user_bloc.dart';
import '../../blocs/user/user_event.dart';
import '../../blocs/user/user_state.dart';
import 'PaymentScreen.dart';
import '../../blocs/product/product_bloc.dart';

class CartScreen extends StatefulWidget {
  const CartScreen({super.key});

  @override
  State<CartScreen> createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  // Th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ tr·∫°ng th√°i "mua v·ªè" v√† s·ªë l∆∞·ª£ng v·ªè cho t·ª´ng s·∫£n ph·∫©m
  Map<int, bool> _buyShellMap = {};  // productId -> c√≥ mua v·ªè hay kh√¥ng
  Map<int, int> _shellQuantityMap = {};  // productId -> s·ªë l∆∞·ª£ng v·ªè
  int _currentUserLevel = 1; // Theo d√µi c·∫•p ƒë·ªô ng∆∞·ªùi d√πng hi·ªán t·∫°i

  // Gi·∫£ ƒë·ªãnh gi√° v·ªè gas 300,000 VNƒê - trong th·ª±c t·∫ø c√≥ th·ªÉ l·∫•y t·ª´ API ho·∫∑c c·∫•u h√¨nh
  final double _shellPrice = 300000;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadCartData();
      _refreshUserData();
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    // Ki·ªÉm tra c·∫•p ƒë·ªô ng∆∞·ªùi d√πng hi·ªán t·∫°i
    final accountState = context.read<AccountBloc>().state;
    if (accountState is AccountLoggedIn && accountState.user != null) {
      final userLevel = accountState.user!.capDo ?? 1;
      if (_currentUserLevel != userLevel) {
        _currentUserLevel = userLevel;
        // N·∫øu c·∫•p ƒë·ªô ƒë√£ thay ƒë·ªïi, l√†m m·ªõi gi·ªè h√†ng
        _loadCartData();
      }
    }

    // L·∫Øng nghe s·ª± thay ƒë·ªïi t·ª´ UserBloc
    final userState = context.watch<UserBloc>().state;
    if (userState is UserLoaded) {
      final userLevel = userState.user.level ?? 1;
      if (_currentUserLevel != userLevel) {
        _currentUserLevel = userLevel;
        // N·∫øu c·∫•p ƒë·ªô ƒë√£ thay ƒë·ªïi, l√†m m·ªõi gi·ªè h√†ng
        _loadCartData();
      }
    }
  }

  void _loadCartData() {
    developer.log('üõí ƒêang l√†m m·ªõi d·ªØ li·ªáu gi·ªè h√†ng');
    final accountState = context.read<AccountBloc>().state;
    if (accountState is AccountLoggedIn) {
      context.read<CartBloc>().add(
        FetchCartEvent(accountState.account.id),
      );
    }
  }

  // L√†m m·ªõi th√¥ng tin ng∆∞·ªùi d√πng
  void _refreshUserData() {
    developer.log('üõí ƒêang l√†m m·ªõi th√¥ng tin ng∆∞·ªùi d√πng');
    final accountState = context.read<AccountBloc>().state;
    if (accountState is AccountLoggedIn) {
      // T·∫£i l·∫°i th√¥ng tin ng∆∞·ªùi d√πng
      context.read<UserBloc>().add(LoadUserByAccountId(accountState.account.id));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        backgroundColor: Colors.teal.shade300,
        elevation: 0,
        title: const Text(
          'Gi·ªè h√†ng',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh, color: Colors.white),
            onPressed: () {
              _refreshUserData(); // L√†m m·ªõi th√¥ng tin ng∆∞·ªùi d√πng
              _loadCartData(); // L√†m m·ªõi gi·ªè h√†ng
            },
          ),
        ],
      ),
      body: MultiBlocListener(
        listeners: [
          BlocListener<CartBloc, CartState>(
            listener: (context, state) {
              if (state is CartError) {
                _showSnackBar(context, state.message, isError: true);
              } else if (state is CartItemRemoved) {
                _showSnackBar(context, 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng');
                _loadCartData(); // Ch·ªâ reload khi x√≥a s·∫£n ph·∫©m
              } else if (state is CartItemUpdated) {
                // _showSnackBar(context, 'ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng');
              }
            },
          ),
          BlocListener<UserBloc, UserState>(
            listener: (context, state) {
              if (state is UserLoaded) {
                final userLevel = state.user.level ?? 1;
                if (_currentUserLevel != userLevel) {
                  _currentUserLevel = userLevel;
                  setState(() {}); // C·∫≠p nh·∫≠t UI
                  developer.log('üõí C·∫•p ƒë·ªô ng∆∞·ªùi d√πng ƒë√£ thay ƒë·ªïi: $_currentUserLevel');
                }
              }
            },
          ),
        ],
        child: BlocBuilder<CartBloc, CartState>(
          builder: (context, state) {
            if (state is CartLoading) {
              return const Center(
                child: CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.deepPurple),
                ),
              );
            } else if (state is CartLoaded) {
              if (state.cartItems.isEmpty) {
                return _buildEmptyCart();
              }
              return _buildLoadedCart(context, state);
            }
            return _buildLoginPrompt();
          },
        ),
      ),
    );
  }

  Widget _buildEmptyCart() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.shopping_cart_outlined,
            size: 100,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 20),
          Text(
            'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w500,
              color: Colors.grey[700],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoadedCart(BuildContext context, CartLoaded state) {
    // L·∫•y th√¥ng tin c·∫•p ƒë·ªô kh√°ch h√†ng t·ª´ AccountBloc v√† UserBloc
    int userLevel = _currentUserLevel; // S·ª≠ d·ª•ng c·∫•p ƒë·ªô ƒë√£ ƒë∆∞·ª£c theo d√µi
    
    // Double check v·ªõi d·ªØ li·ªáu m·ªõi nh·∫•t
    final accountState = context.read<AccountBloc>().state;
    if (accountState is AccountLoggedIn && accountState.user != null) {
      final newLevel = accountState.user!.capDo ?? 1;
      if (userLevel != newLevel) {
        userLevel = newLevel;
        _currentUserLevel = newLevel;
        developer.log('üõí C·∫≠p nh·∫≠t c·∫•p ƒë·ªô t·ª´ AccountBloc: $userLevel');
      }
    }
    
    final userState = context.read<UserBloc>().state;
    if (userState is UserLoaded) {
      final newLevel = userState.user.level ?? 1;
      if (userLevel != newLevel) {
        userLevel = newLevel;
        _currentUserLevel = newLevel;
        developer.log('üõí C·∫≠p nh·∫≠t c·∫•p ƒë·ªô t·ª´ UserBloc: $userLevel');
      }
    }

    double totalAmount = 0;
    int totalItems = 0;

    for (var item in state.cartItems) {
      double itemPrice = item.productPrice ?? 0;
      totalAmount += itemPrice * item.quantity;
      totalItems += item.quantity;
    }

    // T√≠nh to√°n chi·∫øt kh·∫•u d·ª±a tr√™n c·∫•p ƒë·ªô kh√°ch h√†ng
    double discountAmount = 0;
    String discountDescription = '';

    if (userLevel == 1 && totalItems >= 10) {
      discountAmount = totalAmount * 0.1;
      discountDescription = 'Kh√°ch h√†ng c·∫•p 1: Mua 10 t√≠nh ti·ªÅn 9 (Gi·∫£m 10%)';
    } else if (userLevel == 2) {
      if (totalItems >= 10) {
        discountAmount = totalAmount * 0.2;
        discountDescription = 'Kh√°ch h√†ng c·∫•p 2: Mua 10 t√≠nh ti·ªÅn 8';
      } else if (totalItems >= 7) {
        discountAmount = totalAmount * 0.143;
        discountDescription = 'Kh√°ch h√†ng c·∫•p 2: Mua 7 t√≠nh ti·ªÅn 6';
      }
    } else if (userLevel == 3) {
      discountAmount = totalAmount * 0.3;
      discountDescription = 'Kh√°ch h√†ng c·∫•p 3: Gi·∫£m 30% t·ªïng ƒë∆°n h√†ng';
    }
    
    developer.log('üõí Hi·ªÉn th·ªã gi·ªè h√†ng v·ªõi c·∫•p ƒë·ªô: $userLevel, chi·∫øt kh·∫•u: $discountAmount');

    return Column(
      children: [
        // Th√™m th√¥ng b√°o v·ªÅ c·∫•p ƒë·ªô ng∆∞·ªùi d√πng
        if (accountState is AccountLoggedIn)
          _buildUserLevelInfo(context, userLevel),
        
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.all(12),
            itemCount: state.cartItems.length,
            itemBuilder: (context, index) {
              final item = state.cartItems[index];
              return _buildCartItem(context, item);
            },
          ),
        ),
        _buildCheckoutSection(context, state, totalAmount, discountAmount, discountDescription),
      ],
    );
  }

  Widget _buildCartItem(BuildContext context, dynamic item) {
    // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong map th√¨ kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh
    if (!_buyShellMap.containsKey(item.productId)) {
      _buyShellMap[item.productId] = false;
    }
    if (!_shellQuantityMap.containsKey(item.productId)) {
      _shellQuantityMap[item.productId] = 1;
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: item.productImage != null && item.productImage!.isNotEmpty
                  ? Image.asset(
                'assets/images/${item.productImage}',
                width: 80,
                height: 80,
                fit: BoxFit.cover,
              )
                  : Container(
                width: 80,
                height: 80,
                color: Colors.grey[200],
                child: const Icon(Icons.image, size: 40, color: Colors.grey),
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    item.productName ?? 'S·∫£n ph·∫©m kh√¥ng t√™n',
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 6),
                  Text(
                    '${_formatCurrency(item.productPrice ?? 0)} VNƒê',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.deepPurple[700],
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      _buildQuantityControl(
                        context: context,
                        icon: Icons.remove,
                        onPressed: () {
                          if (item.quantity > 1) {
                            context.read<CartBloc>().add(
                              UpdateCartQuantityEvent(
                                item.cartId!,
                                item.productId,
                                item.quantity - 1,
                              ),
                            );

                            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v·ªè t·ªëi ƒëa n·∫øu mua v·ªè
                            if (_buyShellMap[item.productId] == true) {
                              setState(() {
                                if (_shellQuantityMap[item.productId]! > item.quantity - 1) {
                                  _shellQuantityMap[item.productId] = item.quantity - 1;
                                }
                              });
                            }
                          } else {
                            _showDeleteConfirmation(context, item);
                          }
                        },
                      ),
                      Container(
                        width: 40,
                        alignment: Alignment.center,
                        child: Text(
                          '${item.quantity}',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      _buildQuantityControl(
                        context: context,
                        icon: Icons.add,
                        onPressed: () {
                          context.read<CartBloc>().add(
                            UpdateCartQuantityEvent(
                              item.cartId!,
                              item.productId,
                              item.quantity + 1,
                            ),
                          );
                        },
                      ),
                      const Spacer(),
                      IconButton(
                        icon: const Icon(Icons.delete_outline, color: Colors.red),
                        onPressed: () => _showDeleteConfirmation(context, item),
                      ),
                    ],
                  ),

                  // Th√™m ph·∫ßn t√πy ch·ªçn mua v·ªè cho s·∫£n ph·∫©m lo·∫°i gas (maLoai = 1)
                  FutureBuilder<bool>(
                    future: _isGasProduct(item.productId),
                    builder: (context, snapshot) {
                      if (snapshot.hasData && snapshot.data == true) {
                        return Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const SizedBox(height: 8),
                            Row(
                              children: [
                                Checkbox(
                                  value: _buyShellMap[item.productId] ?? false,
                                  onChanged: (value) {
                                    setState(() {
                                      _buyShellMap[item.productId] = value ?? false;
                                    });
                                  },
                                ),
                                Text(
                                  'Mua v·ªè (${_formatCurrency(_shellPrice)} VNƒê/v·ªè)',
                                  style: const TextStyle(
                                    fontSize: 14,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),

                            // Hi·ªÉn th·ªã dropdown ch·ªçn s·ªë l∆∞·ª£ng v·ªè n·∫øu checkbox ƒë∆∞·ª£c ch·ªçn
                            if (_buyShellMap[item.productId] == true)
                              Padding(
                                padding: const EdgeInsets.only(left: 32, bottom: 8),
                                child: Row(
                                  children: [
                                    const Text(
                                      'S·ªë l∆∞·ª£ng v·ªè: ',
                                      style: TextStyle(fontSize: 14),
                                    ),
                                    const SizedBox(width: 8),
                                    Container(
                                      padding: const EdgeInsets.symmetric(horizontal: 8),
                                      decoration: BoxDecoration(
                                        border: Border.all(color: Colors.grey.shade400),
                                        borderRadius: BorderRadius.circular(4),
                                      ),
                                      child: DropdownButton<int>(
                                        value: _shellQuantityMap[item.productId],
                                        underline: const SizedBox(),
                                        items: List.generate(
                                          item.quantity,
                                              (index) => DropdownMenuItem(
                                            value: index + 1,
                                            child: Text('${index + 1}'),
                                          ),
                                        ),
                                        onChanged: (value) {
                                          setState(() {
                                            _shellQuantityMap[item.productId] = value!;
                                          });
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                          ],
                        );
                      }
                      return const SizedBox.shrink(); // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu kh√¥ng ph·∫£i s·∫£n ph·∫©m gas
                    },
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuantityControl({
    required BuildContext context,
    required IconData icon,
    required VoidCallback onPressed,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey[200],
        borderRadius: BorderRadius.circular(8),
      ),
      child: IconButton(
        constraints: const BoxConstraints(
          minWidth: 30,
          minHeight: 30,
        ),
        padding: EdgeInsets.zero,
        icon: Icon(icon, size: 18),
        onPressed: onPressed,
      ),
    );
  }

  Widget _buildCheckoutSection(
      BuildContext context,
      CartLoaded state,
      double totalAmount,
      double discountAmount,
      String discountDescription
      ) {
    // T√≠nh t·ªïng ti·ªÅn v·ªè (n·∫øu c√≥)
    double shellTotalAmount = 0;
    for (var item in state.cartItems) {
      if (_buyShellMap[item.productId] == true) {
        shellTotalAmount += _shellPrice * (_shellQuantityMap[item.productId] ?? 0);
      }
    }

    double subtotalAmount = totalAmount - discountAmount;
    double finalTotalAmount = subtotalAmount + shellTotalAmount;

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 5,
            offset: const Offset(0, -3),
          ),
        ],
      ),
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'T·∫°m t√≠nh:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
              Text(
                '${_formatCurrency(totalAmount)} VNƒê',
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),

          // Hi·ªÉn th·ªã ph·∫ßn gi·∫£m gi√° n·∫øu c√≥
          if (discountAmount > 0) ...[
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Expanded(
                  child: Text(
                    'Gi·∫£m gi√° ($discountDescription):',
                    style: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w500,
                      color: Colors.green,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                Text(
                  '-${_formatCurrency(discountAmount)} VNƒê',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                    color: Colors.green,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Sau gi·∫£m gi√°:',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  '${_formatCurrency(subtotalAmount)} VNƒê',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ],

          // Hi·ªÉn th·ªã ph·∫ßn ti·ªÅn v·ªè n·∫øu c√≥ ch·ªçn mua v·ªè
          if (shellTotalAmount > 0) ...[
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  'Ti·ªÅn v·ªè:',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  '${_formatCurrency(shellTotalAmount)} VNƒê',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ],

          const SizedBox(height: 12),
          const Divider(),
          const SizedBox(height: 12),

          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'T·ªïng thanh to√°n:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                ),
              ),
              Text(
                '${_formatCurrency(finalTotalAmount)} VNƒê',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.deepPurple,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () {
              final accountState = context.read<AccountBloc>().state;
              if (accountState is AccountLoggedIn) {
                final accountId = accountState.account.id;
                final userLevel = accountState.user?.capDo ?? 1;
                String deliveryAddress = '123 Main St';
                if (accountState.user != null) {
                  deliveryAddress = accountState.user!.diaChi ?? '123 Main St';
                }
                if (deliveryAddress.isEmpty) {
                  _showSnackBar(
                    context,
                    'Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ c·ªßa b·∫°n!',
                    isError: true,
                  );
                  return;
                }

                // Truy·ªÅn th√™m th√¥ng tin v·ªÅ mua v·ªè v√† gi·∫£m gi√° qua m√†n h√¨nh thanh to√°n
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => PaymentScreen(
                      items: state.cartItems,
                      accountId: accountId,
                      deliveryAddress: deliveryAddress,
                      buyShellMap: _buyShellMap,
                      shellQuantityMap: _shellQuantityMap,
                      shellPrice: _shellPrice,
                      discountAmount: discountAmount,
                      userLevel: userLevel,
                    ),
                  ),
                );
              } else {
                _showSnackBar(
                  context,
                  'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n!',
                  isError: true,
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.teal,
              padding: const EdgeInsets.symmetric(vertical: 16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              elevation: 4,
              minimumSize: const Size(double.infinity, 50),
            ),
            child: const Text(
              'Thanh to√°n ngay',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoginPrompt() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.account_circle,
            size: 70,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey[700],
            ),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: _loadCartData,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.deepPurple,
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: const Text('ƒêƒÉng nh·∫≠p'),
          ),
        ],
      ),
    );
  }

  void _showDeleteConfirmation(BuildContext context, dynamic item) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n'),
        content: const Text('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?'),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('H·ªßy'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              context.read<CartBloc>().add(
                RemoveFromCartEvent(
                  item.cartDetailId,
                ),
              );
            },
            child: Text(
              'X√≥a',
              style: TextStyle(color: Colors.red[700]),
            ),
          ),
        ],
      ),
    );
  }

  void _showSnackBar(BuildContext context, String message, {bool isError = false}) {
    ScaffoldMessenger.of(context).hideCurrentSnackBar();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? Colors.red[700] : Colors.green[700],
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
        margin: const EdgeInsets.all(10),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  String _formatCurrency(double amount) {
    return amount.toStringAsFixed(0).replaceAllMapped(
      RegExp(r'(\d{1,3})(?=(\d{3})+(?!\d))'),
          (Match m) => '${m[1]}.',
    );
  }

  // Ph∆∞∆°ng th·ª©c ki·ªÉm tra s·∫£n ph·∫©m c√≥ thu·ªôc lo·∫°i gas (maLoai = 1) hay kh√¥ng
  Future<bool> _isGasProduct(int productId) async {
    try {
      // S·ª≠ d·ª•ng GetProductByIdUsecase ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m (bao g·ªìm categoryId)
      final productRepository = context.read<ProductBloc>().getProductByIdUsecase.repository;
      final productModel = await productRepository.getProductById(productId);

      // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m thu·ªôc lo·∫°i gas (maLoai = 1)
      return productModel.maLoai == 1 || productModel.maLoai == 2;
    } catch (e) {
      // N·∫øu c√≥ l·ªói, ghi log v√† tr·∫£ v·ªÅ false
      print('L·ªói khi ki·ªÉm tra lo·∫°i s·∫£n ph·∫©m: $e');
      return false;
    }
  }

  // Th√™m widget hi·ªÉn th·ªã th√¥ng tin c·∫•p ƒë·ªô ng∆∞·ªùi d√πng
  Widget _buildUserLevelInfo(BuildContext context, int userLevel) {
    String levelText = '';
    String nextLevelText = '';
    Color levelColor = Colors.teal;
    
    switch (userLevel) {
      case 1:
        levelText = 'Kh√°ch h√†ng c·∫•p 1';
        nextLevelText = 'Ho√†n th√†nh ƒë∆°n h√†ng ƒë·ªÉ l√™n c·∫•p 2 v√† nh·∫≠n ∆∞u ƒë√£i l·ªõn h∆°n';
        levelColor = Colors.teal;
        break;
      case 2:
        levelText = 'Kh√°ch h√†ng c·∫•p 2';
        nextLevelText = 'Ho√†n th√†nh ƒë∆°n h√†ng ƒë·ªÉ l√™n c·∫•p 3 v√† nh·∫≠n ∆∞u ƒë√£i l·ªõn h∆°n';
        levelColor = Colors.deepPurple;
        break;
      case 3:
        levelText = 'Kh√°ch h√†ng c·∫•p 3 - Cao c·∫•p';
        nextLevelText = 'B·∫°n ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô cao nh·∫•t v√† ƒë∆∞·ª£c h∆∞·ªüng ∆∞u ƒë√£i t·ªëi ƒëa';
        levelColor = Colors.deepOrange;
        break;
      default:
        levelText = 'Kh√°ch h√†ng c·∫•p 1';
        nextLevelText = 'Ho√†n th√†nh ƒë∆°n h√†ng ƒë·ªÉ l√™n c·∫•p v√† nh·∫≠n ∆∞u ƒë√£i l·ªõn h∆°n';
        levelColor = Colors.teal;
    }
    
    return Container(
      margin: const EdgeInsets.all(12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: levelColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: levelColor.withOpacity(0.3)),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.stars, color: levelColor),
              const SizedBox(width: 8),
              Text(
                levelText,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: levelColor,
                  fontSize: 16,
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            nextLevelText,
            style: TextStyle(
              color: Colors.grey.shade700,
              fontSize: 13,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            'C·∫•p 1: Gi·∫£m 10% cho ƒë∆°n t·ª´ 10 s·∫£n ph·∫©m\nC·∫•p 2: Gi·∫£m 14.3% cho ƒë∆°n t·ª´ 7 s·∫£n ph·∫©m, 20% cho ƒë∆°n t·ª´ 10 s·∫£n ph·∫©m\nC·∫•p 3: Gi·∫£m 30% cho t·∫•t c·∫£ ƒë∆°n h√†ng',
            style: TextStyle(
              color: Colors.grey.shade700,
              fontSize: 12,
            ),
          ),
        ],
      ),
    );
  }
}